// <auto-generated />
using System;
using Dw.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dw.Models.Migrations
{
    [DbContext(typeof(DwDbContext))]
    [Migration("20250304120610_V1.0.0")]
    partial class V100
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dw.Models.Entities.SchemaVersion.SchemaVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Systemname")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updatedon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("schemaversions", (string)null);
                });

            modelBuilder.Entity("Dw.Models.Entities.Templates.TemplateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("accesslevel");

                    b.Property<int?>("AccessUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accessuserid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descriptionalt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("templategroup");
                });

            modelBuilder.Entity("Dw.Models.Entities.Templates.TemplateQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("accesslevel");

                    b.Property<int?>("AccessUserId")
                        .HasColumnType("integer")
                        .HasColumnName("accessuserid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descriptionalt");

                    b.Property<string>("JsonQuery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jsonquery");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("namealt");

                    b.Property<string>("RawQuery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rawquery");

                    b.Property<bool>("ShowAsSubquery")
                        .HasColumnType("boolean")
                        .HasColumnName("showassubquery");

                    b.Property<int>("TemplateGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("templategroupid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("TemplateGroupId");

                    b.ToTable("templatequery");
                });

            modelBuilder.Entity("Dw.Models.Entities.Templates.TemplateQuery", b =>
                {
                    b.HasOne("Dw.Models.Entities.Templates.TemplateGroup", null)
                        .WithMany("TemplateQueries")
                        .HasForeignKey("TemplateGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dw.Models.Entities.Templates.TemplateGroup", b =>
                {
                    b.Navigation("TemplateQueries");
                });
#pragma warning restore 612, 618
        }
    }
}
